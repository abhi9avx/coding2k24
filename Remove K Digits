Given a non-negative integer S represented as a string, remove K digits from the number so that the new number is the smallest possible.
Note : The given num does not contain any leading zero.

Example 1:

Input:
S = "149811", K = 3
Output: 
111
Explanation: 
Remove the three digits 
4, 9, and 8 to form the new number 111
which is smallest.
Example 2:

Input:
S = "1002991", K = 3
Output: 
21
Explanation: 
Remove the three digits 1(leading
one), 9, and 9 to form the new number 21(Note
that the output must not contain leading
zeroes) which is the smallest.
Your Task:
You don't need to read input or print anything. Your task is to complete the function removeKdigits() which takes the string S and an integer K as input and returns the new number which is the smallest possible.

Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(|S|).

Constraints:
1<= K <= |S|<=106

..........

class Solution {
    public String removeKdigits(String S, int K) {
        int len = S.length();
        if (len == K) {
            return "0";
        }

        Stack<Character> stack = new Stack<>();

        for (char digit : S.toCharArray()) {
            while (K > 0 && !stack.isEmpty() && stack.peek() > digit) {
                stack.pop();
                K--;
            }
            stack.push(digit);
        }

        // Remove remaining digits from the end if needed
        while (K > 0) {
            stack.pop();
            K--;
        }

        // Build the result string directly using StringBuilder
        StringBuilder result = new StringBuilder();
        for (char digit : stack) {
            result.append(digit);
        }

        // Remove leading zeros
        int start = 0;
        while (start < result.length() && result.charAt(start) == '0') {
            start++;
        }

        result.delete(0, start);

        // If the result is empty, return "0"
        return result.length() > 0 ? result.toString() : "0";
    }

    
}
