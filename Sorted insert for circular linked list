Sorted insert for circular linked list



,............

Given a sorted circular linked list of length n, the task is to insert a new node in this circular list so that it remains a sorted circular linked list.

Example 1:

Input:
n = 3
LinkedList = 1->2->4
(the first and last node is connected, i.e. 4 --> 1)
data = 2
Output: 
1 2 2 4
Explanation:
We can add 2 after the second node.
Example 2:

Input:
n = 4
LinkedList = 1->4->7->9
(the first and last node is connected, i.e. 9 --> 1)
data = 5
Output: 
1 4 5 7 9
Explanation:
We can add 5 after the second node.
Your Task:
The task is to complete the function sortedInsert() which should insert the new node into the given circular linked list and return the head of the linked list.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
0 <= n <= 105

.........

class Solution {
   public Node sortedInsert(Node head, int data) {
        // code here
        Node newNode = new Node(data);
        
        // Case 1: If the list is empty
        if (head == null) {
            newNode.next = newNode; // The new node points to itself
            return newNode;
        }
        
        // Case 2: If the new data needs to be inserted before the head
        if (data <= head.data) {
            Node current = head;
            // Traverse to the last node
            while (current.next != head) {
                current = current.next;
            }
            // Insert the new node at the end, which is also before the head due to circular nature
            newNode.next = head;
            current.next = newNode;
            head = newNode; // Update head because the new node is now the smallest element
            return head;
        }
        
        // Case 3: Standard case for insertion in the middle or end (excluding before the head)
        Node current = head;
        while (current.next != head && current.next.data < data) {
            current = current.next;
        }
        // Insert the new node
        newNode.next = current.next;
        current.next = newNode;
        
        return head;
    }
}

.......

