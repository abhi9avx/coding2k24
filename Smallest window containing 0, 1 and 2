Given a string S consisting of the characters 0, 1 and 2. Your task is to find the length of the smallest substring of string S that contains all the three characters 0, 1 and 2. If no such substring exists, then return -1.

Example 1:

Input:
S = 10212
Output:
3
Explanation:
The substring 102 is the smallest substring
that contains the characters 0, 1 and 2.
Example 2:

Input: 
S = 12121
Output:
-1
Explanation: 
As the character 0 is not present in the
string S, therefor no substring containing
all the three characters 0, 1 and 2
exists. Hence, the answer is -1 in this case.
Your Task:
Complete the function smallestSubstring() which takes the string S as input, and returns the length of the smallest substring of string S that contains all the three characters 0, 1 and 2.

Expected Time Complexity: O( length( S ) )
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ length( S ) ≤ 105
All the characters of String S lies in the set {'0', '1', '2'} 


.............

class Solution {
    public int smallestSubstring(String S) {
        int n = S.length();
        int[] count = new int[3]; // to count occurrences of '0', '1', '2'
        int left = 0, right = 0;
        int uniqueChars = 0;
        int minLength = Integer.MAX_VALUE;

        while (right < n) {
            char currentChar = S.charAt(right);
            if (count[currentChar - '0'] == 0) {
                uniqueChars++;
            }
            count[currentChar - '0']++;

            while (uniqueChars == 3) {
                minLength = Math.min(minLength, right - left + 1);
                char leftChar = S.charAt(left);
                count[leftChar - '0']--;
                if (count[leftChar - '0'] == 0) {
                    uniqueChars--;
                }
                left++;
            }
            right++;
        }

        return minLength == Integer.MAX_VALUE ? -1 : minLength;
    }
};
