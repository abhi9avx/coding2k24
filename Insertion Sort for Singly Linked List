Insertion Sort for Singly Linked List

.........

Given a singly linked list, sort the list (in ascending order) using insertion sort algorithm.

Example 1:

Input:
N = 10
Linked List = 30->23->28->30->11->14->
              19->16->21->25 
Output : 
11 14 16 19 21 23 25 28 30 30 
Explanation :
The resultant linked list is sorted.
Example 2:

Input : 
N = 7
Linked List=19->20->16->24->12->29->30 
Output : 
12 16 19 20 24 29 30 
Explanation : 
The resultant linked list is sorted.
Your task:
You don't need to read input or print anything. Your task is to complete the function insertionSort() which takes the head of the linked list, sorts the list using insertion sort algorithm and returns the head of the sorted linked list.
 
Expected Time Complexity : O(n2)
Expected Auxiliary Space : O(1)
 
Constraints:
0 <= n <= 5*103

........

class Solution {
    static class Node {
        int data;
        Node next;

        Node(int value) {
            data = value;
            next = null;
        }
    }

    public static Node insertionSort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node dummy = new Node(0);
        dummy.next = head;
        Node current = head.next;
        Node lastSorted = head;

        while (current != null) {
            if (current.data < lastSorted.data) {
                Node prev = dummy;
                while (prev.next != null && prev.next.data < current.data) {
                    prev = prev.next;
                }

                lastSorted.next = current.next;
                current.next = prev.next;
                prev.next = current;
            } else {
                lastSorted = current;
            }

            current = lastSorted.next;
        }

        return dummy.next;
    }
}


........

public class Main {
    public static void main(String[] args) {
        Solution.Node head = new Solution.Node(30);
        head.next = new Solution.Node(23);
        head.next.next = new Solution.Node(28);
        head.next.next.next = new Solution.Node(30);
        head.next.next.next.next = new Solution.Node(11);
        head.next.next.next.next.next = new Solution.Node(14);
        head.next.next.next.next.next.next = new Solution.Node(19);
        head.next.next.next.next.next.next.next = new Solution.Node(16);
        head.next.next.next.next.next.next.next.next = new Solution.Node(21);
        head.next.next.next.next.next.next.next.next.next = new Solution.Node(25);

        Solution.Node result = Solution.insertionSort(head);

        // Print the sorted linked list
        while (result != null) {
            System.out.print(result.data + " ");
            result = result.next;
        }
        // Output: 11 14 16 19 21 23 25 28 30 30
    }
}
