1025. Divisor Game

..........

Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:

Choosing any x with 0 < x < n and n % x == 0.
Replacing the number n on the chalkboard with n - x.
Also, if a player cannot make a move, they lose the game.

Return true if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:

Input: n = 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.
Example 2:

Input: n = 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.
 

Constraints:

1 <= n <= 1000

...........

public class Solution {
    public boolean divisorGame(int n) {
        // Base cases
        if (n == 1) {
            return false; // Alice cannot make a move
        }
        if (n == 2) {
            return true; // Alice can choose 1, leaving 1 for Bob to lose
        }

        boolean[] dp = new boolean[n + 1]; // Adjusted array size
        dp[2] = true; // Base case

        for (int i = 3; i <= n; i++) {
            for (int x = 1; x < i; x++) {
                if (i % x == 0 && !dp[i - x]) {
                    dp[i] = true;
                    break;
                }
            }
        }

        return dp[n];
    }

    // Test the divisorGame method
    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.divisorGame(2)); // Output: true
        System.out.println(solution.divisorGame(3)); // Output: false
    }
}
