You are given an undirected graph of N nodes (numbered from 0 to N-1) and M edges. Return 1 if the graph is a tree, else return 0.

Note: The input graph can have self-loops and multiple edges.

Example 1:

Input:
N = 4, M = 3
G = [[0, 1], [1, 2], [1, 3]]
Output: 
1
Explanation: 
Every node is reachable and the graph has no loops, so it is a tree
Example 2:

Input:
N = 4, M = 3
G = [[0, 1], [1, 2], [2, 0]]
Output: 
0
Explanation: 
3 is not connected to any node and there is a loop 0->1->2->0, so it is not a tree.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function isTree() which takes the integer N (the number nodes in the input graph) and the edges representing the graph as input parameters and returns 1 if the input graph is a tree, else 0.

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(N)

Constraints:
1 <= N <= 2*105
0 <= M <= 2*105



..........

import java.util.ArrayList;

class Solution {
    public boolean isTree(int n, int m, ArrayList<ArrayList<Integer>> edges) {
        // Create an array to represent visited nodes
        boolean[] visited = new boolean[n];
        
        // Create an adjacency list to represent the graph
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }
        
        // Fill the adjacency list based on the given edges
        for (ArrayList<Integer> edge : edges) {
            int u = edge.get(0);
            int v = edge.get(1);
            adjList.get(u).add(v);
            adjList.get(v).add(u);
        }
        
        // Check if the graph is connected and acyclic
        if (isCyclic(0, -1, visited, adjList) || !isConnected(visited)) {
            return false; // Not a tree
        }
        
        return true; // It's a tree
    }

    private boolean isCyclic(int v, int parent, boolean[] visited, ArrayList<ArrayList<Integer>> adjList) {
        visited[v] = true;

        for (int neighbor : adjList.get(v)) {
            if (!visited[neighbor]) {
                if (isCyclic(neighbor, v, visited, adjList)) {
                    return true;
                }
            } else if (neighbor != parent) {
                return true; // There is a back edge, indicating a cycle
            }
        }
        return false;
    }

    private boolean isConnected(boolean[] visited) {
        for (boolean isVisited : visited) {
            if (!isVisited) {
                return false; // Not all nodes are reachable
            }
        }
        return true;
    }
}
